
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE1_SOC_D8M_LB_RTL(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS,

	//////////// GPIO_1, GPIO_1 connect to D8M-GPIO //////////
	inout 		          		CAMERA_I2C_SCL,
	inout 		          		CAMERA_I2C_SDA,
	output		          		CAMERA_PWDN_n,
	output		          		MIPI_CS_n,
	inout 		          		MIPI_I2C_SCL,
	inout 		          		MIPI_I2C_SDA,
	output		          		MIPI_MCLK,
	input 		          		MIPI_PIXEL_CLK,
	input 		     [9:0]		MIPI_PIXEL_D,
	input 		          		MIPI_PIXEL_HS,
	input 		          		MIPI_PIXEL_VS,
	output		          		MIPI_REFCLK,
	output		          		MIPI_RESET_n
);

//=======================================================
//  REG/WIRE declarations
//=======================================================


wire        READ_Request ;
wire 	[7:0] BLUE;
wire 	[7:0] GREEN;
wire 	[7:0] RED;
wire        MIPI_PIXEL_CLK2 ;
wire        RESET_N  ; 
wire	[11:0]CCD_R;
wire	[11:0]CCD_G;
wire	[11:0]CCD_B;
wire [11:0] H_Cont ; 
wire [11:0] V_Cont ; 
wire        I2C_RELEASE ;  
wire        CAMERA_I2C_SCL_MIPI ; 
wire        CAMERA_I2C_SCL_AF;
wire        CAMERA_MIPI_RELAESE ;
wire        MIPI_BRIDGE_RELEASE ;  
wire        AUTO_FOC ;
wire        D8M_CK_HZ  ;
wire        D8M_CK_HZ2;
wire        D8M_CK_HZ3;
//=======================================================
// Structural coding
//=======================================================
//------HEX OFF --
assign  HEX2 = 7'h7F;
assign  HEX3 = 7'h7F;
assign  HEX4 = 7'h7F;
assign  HEX5 = 7'h7F;

//------ MIPI BRIGE & CAMERA RESET  --
assign CAMERA_PWDN_n  = 1; 
assign MIPI_CS_n      = 0 ; 
assign MIPI_RESET_n   = RESET_N ;


//------ CAMERA MODULE I2C SWITCH  --
assign I2C_RELEASE    =  CAMERA_MIPI_RELAESE & MIPI_BRIDGE_RELEASE; 
assign CAMERA_I2C_SCL = ( I2C_RELEASE  )?  CAMERA_I2C_SCL_AF  : CAMERA_I2C_SCL_MIPI ;   

//------ MIPI BRIGE & CAMERA SETTING  --  
MIPI_BRIDGE_CAMERA_Config    cfin(
          .RESET_N           (  RESET_N), 
          .CLK_50            ( CLOCK2_50), 
          .MIPI_I2C_SCL      ( MIPI_I2C_SCL), 
          .MIPI_I2C_SDA      ( MIPI_I2C_SDA), 
          .MIPI_I2C_RELEASE  ( MIPI_BRIDGE_RELEASE),  
          .CAMERA_I2C_SCL    ( CAMERA_I2C_SCL_MIPI ),
          .CAMERA_I2C_SDA    ( CAMERA_I2C_SDA),
          .CAMERA_I2C_RELAESE( CAMERA_MIPI_RELAESE)
 );


//------AOTO FOCUS ENABLE  --
D8M_SET   ccd (
	       .RESET_SYS_N  ( RESET_N),
          .CLOCK_50     ( CLOCK2_50      ),
	       .CCD_DATA     ( { MIPI_PIXEL_D[9:0] ,2'b00 }   ) ,   
	       .CCD_FVAL     ( MIPI_PIXEL_VS  ),   // 60hz
	       .CCD_LVAL	   ( MIPI_PIXEL_HS  ),   // 28Khz
	       .CCD_PIXCLK   ( MIPI_PIXEL_CLK ),   // 50Mhz
          .VGA_CLK      ( VGA_CLK),
          .VGA_HS       ( VGA_HS),
          .VGA_VS       ( VGA_VS),	
	       .READ_Request ( READ_Request) ,
	       .H_Cont       ( H_Cont),
	       .V_Cont       ( V_Cont),
          .sCCD_R       ( CCD_R),
          .sCCD_G       ( CCD_G),
          .sCCD_B       ( CCD_B)
	       
);
//------MIPI / VGA REF CLOCK  --
pll_test pll_ref(
	       .refclk       ( CLOCK4_50),
	       .rst          ( 1'b0),
	       .outclk_0     ( MIPI_REFCLK ),     //20Mhz
	       .outclk_1     ( MIPI_PIXEL_CLK2 )  //25.18Mhz
);


//------AOTO FOCUS ENABLE  --
AUTO_FOCUS_ON  u9( 
          .CLK_50      ( CLOCK2_50 ), 
          .I2C_RELEASE ( I2C_RELEASE ), 
          .AUTO_FOC    ( AUTO_FOC )
               ) ; 
//------AOTO FOCUS ADJ  --
FOCUS_ADJ adl(
          .CLK_50        ( CLOCK2_50) , 
          .RESET_N       ( I2C_RELEASE ), 
          .RESET_SUB_N   ( I2C_RELEASE ), 
          .AUTO_FOC      ( KEY[3] & AUTO_FOC ),
          .SW_Y          ( 0 ),
          .SW_H_FREQ     ( 0 ),   
          .SW_FUC_LINE   ( SW[3] ),   
          .SW_FUC_ALL_CEN( 0 ),
          .VIDEO_HS      ( VGA_HS),
          .VIDEO_VS      ( VGA_VS),
	       .VIDEO_DE      (READ_Request) ,
          .VIDEO_CLK     ( VGA_CLK),
          .iR            ( RED), 
          .iG            ( GREEN), 
          .iB            ( BLUE), 
          .oR            ( VGA_R), 
          .oG            ( VGA_G), 
          .oB            ( VGA_B),    
          .READY         ( READY),
          .SCL           ( CAMERA_I2C_SCL_AF ), 
          .SDA           ( CAMERA_I2C_SDA )
   
);   
   
//-----   -AOTO FOCUS ENABLE  --
RESET_DELAY  dl(
           .RESET_N      ( KEY[0] ) ,
           .CLK          ( CLOCK2_50) , 
           .READY        ( RESET_N)  
);   
   
   
//-----   -VGA Controller  --
   
VGA_Controller_trig	u1	(	
	       .iCLK          ( MIPI_PIXEL_CLK2),
	       .iHS           ( MIPI_PIXEL_HS  ) , 
	       .iVS           ( MIPI_PIXEL_VS  ) ,
	       .iRed          ( CCD_R[11:4]   ),
	       .iGreen        ( CCD_G[11:4]   ) ,
	       .iBlue         ( CCD_B[11:4]   ),
	       	   
	       .oVGA_R        ( RED   ),
	       .oVGA_G        ( GREEN ),
	       .oVGA_B        ( BLUE  ),
	       .oVGA_H_SYNC   ( VGA_HS ),
	       .oVGA_V_SYNC   ( VGA_VS ),
	       .oVGA_SYNC     ( VGA_SYNC_N  ),
	       .oVGA_BLANK    ( VGA_BLANK_N ),
	       .oVGA_CLOCK    ( VGA_CLK     ),
	       .oRequest      ( READ_Request),
	       .iRST_N        ( 1 ) , 
	       .H_Cont_       (H_Cont),
	       .V_Cont_       (V_Cont)
);
					
//-- VS FREQUENCY MEASURE : 60HZ --
 
FpsMonitor uFps(
	/*input					  */    .clk50    ( CLOCK2_50 ),
	/*input     			  */    .vs       ( MIPI_PIXEL_VS ),
	/*output reg [7:0]	  */    .fps      ( ),
	/*output reg [6:0]	  */    .hex_fps_h( HEX1 ),
	/*output reg [6:0]	  */    .hex_fps_l( HEX0 )
);


//--FREQUNCY TEST--
CLOCKMEM  ck1 ( .CLK(VGA_CLK   ),     .CLK_FREQ  (25000000  ),.CK_1HZ (D8M_CK_HZ   ));
CLOCKMEM  ck2 ( .CLK(MIPI_REFCLK    ),.CLK_FREQ  (20000000  ),.CK_1HZ (D8M_CK_HZ2  ));
CLOCKMEM  ck3 ( .CLK(MIPI_PIXEL_CLK ),.CLK_FREQ  (25000000 ),.CK_1HZ (D8M_CK_HZ3  ));

//--LED STATUS-----
assign LEDR[9:0] = { D8M_CK_HZ ,D8M_CK_HZ2,D8M_CK_HZ3 ,5'h0,CAMERA_MIPI_RELAESE ,MIPI_BRIDGE_RELEASE  } ; 

endmodule


